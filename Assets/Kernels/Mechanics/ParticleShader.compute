#include "mechanics.cginc"

#pragma kernel Particles
[numthreads(256, 1, 1)]
void Particles(uint3 id : SV_DispatchThreadID)
{
	uint w, h;
	NewFrame.GetDimensions(w, h);
	for(uint i = 0; i < h; i++)
	{
		int2 coords = int2(id.x, i);
		int2 coordsAbove = coords + eee.yx;
		NewFrame[coords] = FrameBefore[coords];
		float4 col = FrameBefore[coordsAbove];
		if (IS_EMPTY(FrameBefore[coords]) || (IS_EQUAL(FrameBefore[coords], LAVA) && IS_MINED(col)))
		{
			if (IS_MOVABLE(col))
			{
				int2 coordsLeft = coordsAbove + eee.xy;
				int2 coordsRight = coordsAbove + eee.zy;
				if (IS_EQUAL(NewFrame[coordsLeft], BELT_UP) || IS_EQUAL(NewFrame[coordsRight], BELT_UP)) continue;
				NewFrame[coords] = FrameBefore[coordsAbove];
				FrameBefore[coordsAbove] = 0;
			}
		}
	}
}

#pragma kernel Overall
[numthreads(16, 16, 1)]
void Overall(uint3 id : SV_DispatchThreadID)
{
	if (IS_EQUAL(NewFrame[id.xy], TREE_LEAVES))
	{
		if ((!IS_EQUAL(NewFrame[id.xy + eee.xy], TREE_TRUNK)) &&
			(!IS_EQUAL(NewFrame[id.xy + eee.yx], TREE_TRUNK)) &&
			(!IS_EQUAL(NewFrame[id.xy + eee.xx], TREE_TRUNK)) &&
			(!IS_EQUAL(NewFrame[id.xy + eee.xz], TREE_TRUNK)) &&
			(!IS_EQUAL(NewFrame[id.xy + eee.zx], TREE_TRUNK)) &&
			(!IS_EQUAL(NewFrame[id.xy + eee.zy], TREE_TRUNK)) &&
			(!IS_EQUAL(NewFrame[id.xy + eee.yz], TREE_TRUNK)) &&
			(!IS_EQUAL(NewFrame[id.xy + eee.zz], TREE_TRUNK)))
		{
			if (snoise(float3(id.xy * 0.05, Time)) > 0.25)
			{
				NewFrame[id.xy] = 0;
			}
		}
	}
	if (IS_EQUAL(NewFrame[id.xy], TREE_TRUNK))
	{
		if ((!IS_EQUAL(NewFrame[id.xy + eee.xz], TREE_TRUNK)) &&
			(!IS_EQUAL(NewFrame[id.xy + eee.yz], TREE_TRUNK)) &&
			(!IS_EQUAL(NewFrame[id.xy + eee.yz], GRASS)) &&
			(!IS_EQUAL(NewFrame[id.xy + eee.zz], TREE_TRUNK)))
		{
			if (snoise(float3(id.xy * 0.05, Time)) > 0.5)
			{
				NewFrame[id.xy] = 0;
			}
		}
	}
}

#pragma kernel Treenemy
[numthreads(16, 16, 1)]
void Treenemy(uint3 id : SV_DispatchThreadID)
{
	int2 coords = id.xy;
	int2 coordsAbove = id.xy + eee.yx;
	int2 coordsBelow = id.xy + eee.yz;
	int2 coordsLeft = id.xy + eee.zy;
	int2 coordsRight = id.xy + eee.xy;
	float4 tile = NewFrame[coords];
	float4 tileAbove = NewFrame[coordsAbove];
	float4 tileBelow = NewFrame[coordsBelow];
	float4 tileLeft = NewFrame[coordsLeft];
	float4 tileRight = NewFrame[coordsRight];
	if (IS_TREENEMY_BRANCH(tile))
	{
		if (IS_LIQUID(tileAbove))
		{
			NewFrame[coordsAbove] = TREENEMY_BRANCH_ASLEEP;
		}
		if (IS_LIQUID(tileBelow))
		{
			NewFrame[coordsBelow] = TREENEMY_BRANCH_ASLEEP;
		}
		if (IS_LIQUID(tileLeft))
		{
			NewFrame[coordsLeft] = TREENEMY_BRANCH_ASLEEP;
		}
		if (IS_LIQUID(tileRight))
		{
			NewFrame[coordsRight] = TREENEMY_BRANCH_ASLEEP;
		}
		if (tile.y > 0.15)
		{
			tile.y -= 0.1;
			NewFrame[coords] = tile;
		}
		if (tile.y < 0.15 && (
			IS_TREENEMY_TRIGGER(tileAbove) ||
			IS_TREENEMY_TRIGGER(tileBelow) ||
			IS_TREENEMY_TRIGGER(tileLeft) ||
			IS_TREENEMY_TRIGGER(tileRight)))
		{
			tile.y = 1.0;
			NewFrame[coords] = tile;
			if (snoise(float3(id.xy * 0.05, Time)) > 0.5)
			{
				if (!IS_EMPTY(tileAbove) && !IS_TREENEMY_CORE(tileAbove) &&
					(
						!IS_TREENEMY_BRANCH(NewFrame[coordsAbove+eee.xy]) &&
						!IS_TREENEMY_BRANCH(NewFrame[coordsAbove+eee.zy]) &&
						!IS_TREENEMY_BRANCH(NewFrame[coordsAbove+eee.yx])
					))
				{
					NewFrame[coordsAbove] = TREENEMY_BRANCH_ASLEEP;
				}
				if (!IS_EMPTY(tileBelow) && !IS_TREENEMY_CORE(tileBelow) &&
					(
						!IS_TREENEMY_BRANCH(NewFrame[coordsBelow+eee.xy]) &&
						!IS_TREENEMY_BRANCH(NewFrame[coordsBelow+eee.zy]) &&
						!IS_TREENEMY_BRANCH(NewFrame[coordsBelow+eee.yz])
					))
				{
					NewFrame[coordsBelow] = TREENEMY_BRANCH_ASLEEP;
				}
				if (!IS_EMPTY(tileLeft) && !IS_TREENEMY_CORE(tileLeft) &&
					(
						!IS_TREENEMY_BRANCH(NewFrame[coordsLeft+eee.zy]) &&
						!IS_TREENEMY_BRANCH(NewFrame[coordsLeft+eee.yz]) &&
						!IS_TREENEMY_BRANCH(NewFrame[coordsLeft+eee.yx])
					))
				{
					NewFrame[coordsLeft] = TREENEMY_BRANCH_ASLEEP;
				}
				if (!IS_EMPTY(tileRight) && !IS_TREENEMY_CORE(tileRight) &&
					(
						!IS_TREENEMY_BRANCH(NewFrame[coordsRight+eee.xy]) &&
						!IS_TREENEMY_BRANCH(NewFrame[coordsRight+eee.yz]) &&
						!IS_TREENEMY_BRANCH(NewFrame[coordsRight+eee.yx])
					))
				{
					NewFrame[coordsRight] = TREENEMY_BRANCH_ASLEEP;
				}
			}
			
		}
	}
	else if (IS_TREENEMY_CORE(tile))
	{
		float timeToSignal = tile.y - 0.1;
		if (timeToSignal >= -0.05)
		{
			if (timeToSignal < 0.05)
			{
				tile.y = 1.0;
				NewFrame[coords] = tile;
			}
			else
			{
				tile.y -= 0.1;
				NewFrame[coords] = tile;
			}
		}
		else if (
			IS_TREENEMY_TRIGGER(tileAbove) ||
			IS_TREENEMY_TRIGGER(tileBelow) ||
			IS_TREENEMY_TRIGGER(tileLeft) ||
			IS_TREENEMY_TRIGGER(tileRight))
		{
			tile.y = 0.1;
			NewFrame[coords] = tile;
		}
	}
}

#pragma kernel Machines
[numthreads(16, 16, 1)]
void Machines(uint3 id : SV_DispatchThreadID)
{
	if (IS_EQUAL(NewFrame[id.xy], JUNCTION_MID))
	{
		for (int dx = 0; dx < 3;dx++)
		{
			for (int dy = 0; dy < 3; dy++)
			{
				if (!IS_EQUAL(NewFrame[id.xy + int2(dx - 1, dy - 1)], float4((dx * 3 + dy) / 9.0, 0.2, 0.1, 1.0))) return;
			}
		}
		if (IS_MOVABLE(NewFrame[id.xy + int2(-2, 0)]) && IS_EMPTY(NewFrame[id.xy + int2(2, 0)]))
		{
			NewFrame[id.xy + int2(2, 0)] = NewFrame[id.xy + int2(-2, 0)];
			NewFrame[id.xy + int2(-2, 0)] = 0;
		}
		else if (IS_MOVABLE(NewFrame[id.xy + int2(2, 0)]) && IS_EMPTY(NewFrame[id.xy + int2(-2, 0)]))
		{
			NewFrame[id.xy + int2(-2, 0)] = NewFrame[id.xy + int2(2, 0)];
			NewFrame[id.xy + int2(2, 0)] = 0;
		}
		if (IS_MOVABLE(NewFrame[id.xy + int2(0, -2)]) && IS_EMPTY(NewFrame[id.xy + int2(0, 2)]))
		{
			NewFrame[id.xy + int2(0, 2)] = NewFrame[id.xy + int2(0, -2)];
			NewFrame[id.xy + int2(0, -2)] = 0;
		}
		else if (IS_MOVABLE(NewFrame[id.xy + int2(0, 2)]) && IS_EMPTY(NewFrame[id.xy + int2(0, -2)]))
		{
			NewFrame[id.xy + int2(0, -2)] = NewFrame[id.xy + int2(0, 2)];
			NewFrame[id.xy + int2(0, 2)] = 0;
		}
	}
	if (IS_EQUAL(NewFrame[id.xy], FORGE_MID))
	{
		for (int dx = 0; dx < 3; dx++)
		{
			for (int dy = 0; dy < 3; dy++)
			{
				if (!IS_EQUAL(NewFrame[id.xy + int2(dx - 1, dy - 1)], float4((dx * 3 + dy) / 9.0, 0.3, 0.1, 1.0))) return;
			}
		}
		
		float4 forged = float4(0, 0, 0, 0);
		if (IS_EQUAL(NewFrame[id.xy + int2(0, 2)], MINED(IRON)))
		{
			forged = IRON_BAR;
		}
		else if (IS_EQUAL(NewFrame[id.xy + int2(0, 2)], MINED(COPPER)))
		{
			forged = COPPER_BAR;
		}
		else if (IS_EQUAL(NewFrame[id.xy + int2(0, 2)], MINED(GOLD)))
		{
			forged = GOLD_BAR;
		}
		else if (IS_EQUAL(NewFrame[id.xy + int2(0, 2)], IRON_BAR))
		{
			forged = STEEL_BAR;
		}
		if (IS_EQUAL(forged, float4(0, 0, 0, 0))) return;
		
		if (IS_EMPTY(NewFrame[id.xy + int2(-2, -1)]) && IS_EQUAL(NewFrame[id.xy + int2(2, -1)], MINED(COAL)))
		{
			NewFrame[id.xy + int2(-2, -1)] = forged;
			NewFrame[id.xy + int2(2, -1)] = 0;
			NewFrame[id.xy + int2(0, 2)] = 0;
		}
		else if (IS_EMPTY(NewFrame[id.xy + int2(2, -1)]) && IS_EQUAL(NewFrame[id.xy + int2(-2, -1)], MINED(COAL)))
		{
			NewFrame[id.xy + int2(2, -1)] = forged;
			NewFrame[id.xy + int2(-2, -1)] = 0;
			NewFrame[id.xy + int2(0, 2)] = 0;
		}
	}
}