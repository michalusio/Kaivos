#include "..\blockList.cginc"

#pragma kernel CSMain

int TileToPlace;
int2 WhereToPlace;
RWBuffer<bool> WasPlaced;
RWTexture2D<float4> Result;

[numthreads(1, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float4 tile = float4(0, 0, 0, 0);
	
	switch(TileToPlace)
	{
		case 0:
			tile = BELT_RIGHT;
			break;
		case 1:
			tile = BELT_LEFT;
			break;
		case 2:
			tile = BELT_UP;
			break;
		case 3:
			tile = LADDER;
			break;
		case 4:
			tile = TORCH;
			break;
		case 5:
			tile = TREENEMY_CORE_ASLEEP;
			break;
		case 6:
			tile = TREENEMY_BRANCH_ASLEEP;
			break;
		case 7:
			tile = WATER;
			break;
		case 8:
			tile = LAVA;
			break;
		case 9:
			tile = float4(0, 0.2, 0.1, 1.0);//junction
			break;
		case 10:
			tile = float4(0, 0.3, 0.1, 1.0);//forge
			break;
	}
	if (TileToPlace > 8)
	{
		for (int dx = 0; dx < 3; dx++)
		{
			for (int dy = 0; dy < 3; dy++)
			{
				if (!IS_EMPTY(Result[WhereToPlace + int2(dx - 1, dy - 1)]))
				{
					WasPlaced[0] = false;
					return;
				}
			}
		}
		
		for (dx = 0; dx < 3; dx++)
		{
			for (int dy = 0; dy < 3; dy++)
			{
				Result[WhereToPlace + int2(dx - 1, dy - 1)] = float4((dx * 3 + dy) / 9.0, tile.yzw);
			}
		}
		WasPlaced[0] = true;
	}
	else if (IS_EMPTY(Result[WhereToPlace]))
	{
		Result[WhereToPlace] = tile;
		WasPlaced[0] = true;
	}
	else if (IS_BELT(tile) && IS_MOVABLE(Result[WhereToPlace]))
	{
		float4 temp = Result[WhereToPlace];
		Result[WhereToPlace] = tile;
		WhereToPlace.y += 1;
		float4 currentPlace = Result[WhereToPlace];
		while (IS_MOVABLE(currentPlace) || IS_EMPTY(currentPlace))
		{
			Result[WhereToPlace] = temp;
			if (IS_EMPTY(currentPlace)) break;
			temp = currentPlace;
			WhereToPlace.y += 1;
			currentPlace = Result[WhereToPlace];
		}
		WasPlaced[0] = true;
	}
	else
	{
		WasPlaced[0] = false;
	}
}
